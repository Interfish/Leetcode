//regular one, needs more space.
class Solution {
public:
    vector<vector<int>> permute(vector<int>& nums) {
        vector<vector<int> > result;
        if(!nums.size()||nums.size()==1) result.push_back(nums);
        else iteration({}, nums, result);
        return result;
    }
    
    void iteration(vector<int> fixed, vector<int> next,vector<vector<int> >& result){
        if(next.size()==2){
            vector<int> final;
            final = fixed;
            final.push_back(next[0]);
            final.push_back(next[1]);
            result.push_back(final);
            final = fixed;
            final.push_back(next[1]);
            final.push_back(next[0]);
            result.push_back(final);
            return;
        }
        vector<int> copyf,copyn;
        int i;
        for(i=0;i<next.size();i++){
            copyf = fixed;
            copyf.push_back(next[i]);
            copyn = next;
            copyn.erase(copyn.begin()+i);
            iteration(copyf, copyn, result);
        }
    }
};

//in-place version, i think is better than above. Less space and complexity.
class Solution {
public:
    vector<vector<int>> permute(vector<int>& nums) {
        vector<vector<int> > result;
        if(!nums.size()||nums.size()==1) result.push_back(nums);
        else iteration(0, nums, result);
        return result;
    }
    
    void iteration(int i, vector<int>& nums, vector<vector<int> > &result){
        if(i==nums.size()-2){
            result.push_back(nums);
            swap(nums[i],nums[i+1]);
            result.push_back(nums);
            swap(nums[i],nums[i+1]);
            return;
        }
        int j;
        for(j=i;j<nums.size();j++){
            nums.insert(nums.begin()+i,nums[j]);
            nums.erase(nums.begin()+j+1);
            iteration(i+1, nums, result);
            nums.insert(nums.begin()+j+1,nums[i]);
            nums.erase(nums.begin()+i);
        }
    }
};
