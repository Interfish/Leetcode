//TLE. complexity very large
class Solution {
public:
    int uniquePathsWithObstacles(vector<vector<int>>& obstacleGrid) {
        int count(0),m(obstacleGrid[0].size()-1),n(obstacleGrid.size()-1);
        iteration(0, 0, m, n, count, obstacleGrid);
        return count;
    }
    void iteration(int px, int py, int& m, int& n, int& count, vector<vector<int>>& obstacleGrid){
        if(obstacleGrid[py][px]==1) return;
        if(px==m&&py==n){
            count++;
            return;
        }
        if(px!=m)
            iteration(px+1, py, m, n, count, obstacleGrid);
        if(py!=n)
            iteration(px, py+1, m, n, count, obstacleGrid);
    }   
};

//smart solution
class Solution {
public:
    int uniquePathsWithObstacles(vector<vector<int> > &obstacleGrid) {
        int m = obstacleGrid.size() , n = obstacleGrid[0].size();
        vector<vector<int>> dp(m+1,vector<int>(n+1,0));
        dp[0][1] = 1;
        for(int i = 1 ; i <= m ; ++i)
            for(int j = 1 ; j <= n ; ++j)
                if(!obstacleGrid[i-1][j-1])
                    dp[i][j] = dp[i-1][j]+dp[i][j-1];
        return dp[m][n];
    }
};
