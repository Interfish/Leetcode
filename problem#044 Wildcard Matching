//the sequence of p is settled. So once there is a element match with s, this is it.

class Solution {
public:
    bool isMatch(string s, string p) {
        int m = s.length(), n = p.length();
        int i = 0, j = 0, asterisk = -1, match;
        while (i < m) {
            if (j < n && p[j] == '*') {
                match = i; 
                asterisk = j++;
            }
            else if (j < n && (s[i] == p[j] || p[j] == '?')) {
                i++; 
                j++;
            }
            else if (asterisk >= 0) {
                i = ++match;
                j = asterisk + 1;
            }
            else return false;
        }
        while (j < n && p[j] == '*') j++;
        return j == n;
    }
};


//time limitation exceeded
class Solution {
public:
    bool isMatch(string s, string p) {
        int i;
        if(s==""){
            for(i=0;i<p.size();i++){
                if(p[i]!='*')
                    return false;
            }
            return true;
        }
        if(p=="")   return false;
        if(p[0]==s[0]||p[0]=='?')  return isMatch(s.substr(1), p.substr(1));
        else if(p[0]=='*'){
            while(p[1]=='*')
                p = p.substr(1);
            if(isMatch(s, p.substr(1)))
                return true;
            else if(isMatch(s.substr(1),p))
                return true;
        }
        return false;
    }
    
};

//time limitation exceeded
class Solution {
public:
    bool isMatch(string s, string p) {
        if((s.empty()&&p.empty())||(p.size()==1&&!s.empty()&&p[0]=='*'))    return true;
        if((s.empty()&&!p.empty()&&p[0]!='*')||(!s.empty()&&p.empty())) return false;
        if(s.empty()&&!p.empty())
            return isMatch(s, p.substr(1));
        if(p[0]=='*'){
            if(p[1]=='*')
                return isMatch(s, p.substr(1));
            else{
                for(int i=0;i<s.size();i++){
                    if(s[i]==p[1]||p[1]=='?'){
                        if(isMatch(s.substr(i+1), p.substr(2)))
                            return true;
                    }
                }
            }
        }
        return  (s[0]==p[0])||(p[0]=='?')?isMatch(s.substr(1), p.substr(1)):false; 
    }
};
