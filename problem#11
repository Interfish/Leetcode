class Solution {
public:
    // my solution
    int maxArea(vector<int>& height) {
        if(height.empty())
            return 0;
        if(height.size()==1)
            return 0;
        int i,j,i_high(height[0]),j_high(height.back()),max_area;
        max_area = (height.size()-1) * min(height[0],height.back());
        for(i=0;i<=height.size()-2;i++){
            if(height[i]<i_high)
                continue;
            i_high = height[i];
            j_high = height.back();
            for(j=height.size()-1;j>=i+1;j--){
                if(height[j]>=j_high){
                    j_high = height[j];
                    max_area = max((j-i)*min(height[i],height[j]),max_area);
                }
                else
                    continue;
            }
        }
        return max_area;
    }
    /*sample solution
    int maxArea(vector<int>& height) {
    int water = 0;
    int i = 0, j = height.size() - 1;
    while (i < j) {
        int h = min(height[i], height[j]);
        water = max(water, (j - i) * h);
        while (height[i] <= h && i < j) i++;
        while (height[j] <= h && i < j) j--;
    }
    return water;
    }
    */
};
