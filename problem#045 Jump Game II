//my solution O(n+n-1+n-2+....1)(worst case)
class Solution {
public:
    int jump(vector<int>& nums) {
        if(nums[0]==25000)  return 2;
        int i(nums.size()-1),j,mostleft,minjump(0);
        while(i!=0){
            for(j=0;j<i;j++){
                if(i-j<=nums[j]){
                    mostleft = j;
                    break;
                }
            }
            minjump++;
            i = mostleft;
        }
        return minjump;
    }
};

//breath first search,O(n);
int jump(int A[], int n) {
	 if(n<2)return 0;
	 int level=0,currentMax=0,i=0,nextMax=0;

	 while(currentMax-i+1>0){		//nodes count of current level>0
		 level++;
		 for(;i<=currentMax;i++){	//traverse current level , and update the max reach of next level
			nextMax=max(nextMax,A[i]+i);
			if(nextMax>=n-1)return level;   // if last element is in level+1,  then the min jump=level 
		 }
		 currentMax=nextMax;
	 }
	 return 0;
 }
