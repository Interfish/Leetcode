/**
 * Definition for an interval.
 * struct Interval {
 *     int start;
 *     int end;
 *     Interval() : start(0), end(0) {}
 *     Interval(int s, int e) : start(s), end(e) {}
 * };
 */
class Solution {
public:
    vector<Interval> insert(vector<Interval>& intervals, Interval newInterval) {
        vector<Interval> result;
        int i;
        bool flag(true);
        
        for(i=0;i<intervals.size();i++){
            if(newInterval.start>intervals[i].end)
                result.push_back(intervals[i]);
            else if(newInterval.end<intervals[i].start){
                if(flag){
                    result.push_back(newInterval);
                    flag = false;
                }
                result.push_back(intervals[i]);
            }
            else{
                newInterval.start = min(newInterval.start, intervals[i].start);
                newInterval.end = max(newInterval.end, intervals[i].end);
            }
        }
        if(flag)
            result.push_back(newInterval);
        return result;
    }
};
