//two pointer solution
class Solution {
public:
    vector<int> maxSlidingWindow(vector<int>& nums, int k) {
        int max(0xffffffff), maxp(0);
        vector<int> res;
        if(k>nums.size())   return {};
        if(!nums.size())    return {};
        for(int i=0;i<k;i++){
            if(nums[i]>max){
                max = nums[i];
                maxp = i;
            }
        }
        res.push_back(max);        
        for(int i=1;i<=nums.size()-k;i++){
            if(nums[i-1]==max){
                max = 0xffffffff;
                for(int j=i;j<k+i;j++){
                    if(nums[j]>max){
                        max = nums[j];
                        maxp = j;
                    }
                }
            }
            else{
                if(nums[i+k-1]>max){
                    max = nums[i+k-1];
                    maxp = i+k-1;
                }
            }
            res.push_back(max);
        }
        return res;
    }
};

//Deque solution
class Solution {
public:
    vector<int> maxSlidingWindow(vector<int>& nums, int k) {
        deque<int> dq;
        vector<int> ans;
        for (int i=0; i<nums.size(); i++) {
            if (!dq.empty() && dq.front() == i-k) dq.pop_front();
            while (!dq.empty() && nums[dq.back()] < nums[i])
                dq.pop_back();
            dq.push_back(i);
            if (i>=k-1) ans.push_back(nums[dq.front()]);
        }
        return ans;
    }
};
