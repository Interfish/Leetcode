//recursion method, TLE.
class Solution {
public:
    bool wordBreak(string s, vector<string>& wordDict) {
        vector<bool> match(wordDict.size(), true);
        int count(wordDict.size());
        for(int i=0;i<s.size();i++){
            for(int j=0;j<wordDict.size();j++){
                if(match[j]){
                    if(s[i]!=wordDict[j][i]){
                        match[j] = false;
                        count--;
                    }
                    else if(i==wordDict[j].size()-1){
                        if(i==s.size()-1)   return true;
                        else if(wordBreak(s.substr(i+1), wordDict))
                                return true;
                    }
                }
                if(count==0)    break;
            }
        }
        return false;
    }
};

//DP method.
class Solution {
public:
    bool wordBreak(string s, vector<string> &wordDict) {
        if(wordDict.size()==0) return false;
        
        vector<bool> dp(s.size()+1,false);
        dp[0]=true;
        
        for(int i=1;i<=s.size();i++)
        {
            for(int j=i-1;j>=0;j--)
            {
                if(dp[j])
                {
                    string word = s.substr(j,i-j);
                    if(find(wordDict.begin(), wordDict.end(), word)!=wordDict.end())
                    {
                        dp[i]=true;
                        break; //next i
                    }
                }
            }
        }
        return dp[s.size()];
    }
};
