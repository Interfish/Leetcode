//brutal force back tracking
class Solution {
public:
    int scheduleCourse(vector<vector<int>>& courses) {
        int max(0);
        bool used[courses.size()];
        for(int i(0);i<courses.size();i++)
            used[i] = true;
        iteration(0, courses, max, 1, used);
        return max;
    }
    void iteration(int count, vector<vector<int>> & courses, int & max, int start, bool * used){
        for(int i(0);i<courses.size();i++){
            if(courses[i][1]-courses[i][0]+1>=start&&used[i]){
                if(count+1>max)   max = count+1;
                used[i] = false;
                iteration(count+1, courses, max, start+courses[i][0], used);
                used[i] = true;
            }
        }
    }
};

//greedy approach
class Solution {
public:
    int scheduleCourse(vector<vector<int>>& courses) {
        // sort courses by the end date
        sort(courses.begin(),courses.end(),
            [](vector<int> a, vector<int> b){return a.back()<b.back();});
            
        multiset<int> cls; // store lengths of each course we take (could be duplicates!)
        int cursum=0;
        
        for (int i=0; i<courses.size(); i++) {
            
            // if we have enough time, we will take this course
            if (cursum+courses[i].front()<=courses[i].back()) {
                cls.insert(courses[i].front());
                cursum+=courses[i].front();
            } else if (*cls.rbegin()>courses[i].front()) {
                // if we don't have enough time, we switch out a longer course
                cursum+=courses[i].front()-*cls.rbegin();
                cls.erase(--cls.end());
                cls.insert(courses[i].front());
            } // if we don't have enough time for course[i], 
              //and it's longer than any courses taken, then we ignore it
        }
        
        return cls.size();
    }
};
